# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# assets types

class assetsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the assets create method"""
    id: _int
    symbol: Optional[_str]
    asset_class: Optional[_str]
    date_added: Optional[datetime.datetime]


class assetsCreateInput(assetsOptionalCreateInput):
    """Required arguments to the assets create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class assetsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the assets create method, without relations"""
    id: _int
    symbol: Optional[_str]
    asset_class: Optional[_str]
    date_added: Optional[datetime.datetime]


class assetsCreateWithoutRelationsInput(assetsOptionalCreateWithoutRelationsInput):
    """Required arguments to the assets create method, without relations"""

class assetsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'assetsCreateWithoutRelationsInput'
    where: 'assetsWhereUniqueInput'

class assetsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'assetsCreateWithoutRelationsInput'
    connect: 'assetsWhereUniqueInput'
    connect_or_create: 'assetsConnectOrCreateWithoutRelationsInput'


class assetsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['assetsCreateWithoutRelationsInput', List['assetsCreateWithoutRelationsInput']]
    connect: Union['assetsWhereUniqueInput', List['assetsWhereUniqueInput']]
    connect_or_create: Union['assetsConnectOrCreateWithoutRelationsInput', List['assetsConnectOrCreateWithoutRelationsInput']]

_assetsWhereUnique_id_Input = TypedDict(
    '_assetsWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

assetsWhereUniqueInput = _assetsWhereUnique_id_Input


class assetsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    symbol: Optional[_str]
    asset_class: Optional[_str]
    date_added: Optional[datetime.datetime]


class assetsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    symbol: Optional[_str]
    asset_class: Optional[_str]
    date_added: Optional[datetime.datetime]


class assetsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['assetsCreateWithoutRelationsInput']
    connect: List['assetsWhereUniqueInput']
    connect_or_create: List['assetsConnectOrCreateWithoutRelationsInput']
    set: List['assetsWhereUniqueInput']
    disconnect: List['assetsWhereUniqueInput']
    delete: List['assetsWhereUniqueInput']

    # TODO
    # update: List['assetsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['assetsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['assetsScalarWhereInput']
    # upsert: List['assetsUpserteWithWhereUniqueWithoutRelationsInput']


class assetsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'assetsCreateWithoutRelationsInput'
    connect: 'assetsWhereUniqueInput'
    connect_or_create: 'assetsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'assetsUpdateInput'
    # upsert: 'assetsUpsertWithoutRelationsInput'


class assetsUpsertInput(TypedDict):
    create: 'assetsCreateInput'
    update: 'assetsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_assets_id_OrderByInput = TypedDict(
    '_assets_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_assets_symbol_OrderByInput = TypedDict(
    '_assets_symbol_OrderByInput',
    {
        'symbol': 'SortOrder',
    },
    total=True
)

_assets_asset_class_OrderByInput = TypedDict(
    '_assets_asset_class_OrderByInput',
    {
        'asset_class': 'SortOrder',
    },
    total=True
)

_assets_date_added_OrderByInput = TypedDict(
    '_assets_date_added_OrderByInput',
    {
        'date_added': 'SortOrder',
    },
    total=True
)

_assets_RelevanceInner = TypedDict(
    '_assets_RelevanceInner',
    {
        'fields': 'List[assetsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_assets_RelevanceOrderByInput = TypedDict(
    '_assets_RelevanceOrderByInput',
    {
        '_relevance': '_assets_RelevanceInner',
    },
    total=True
)

assetsOrderByInput = Union[
    '_assets_id_OrderByInput',
    '_assets_symbol_OrderByInput',
    '_assets_asset_class_OrderByInput',
    '_assets_date_added_OrderByInput',
    '_assets_RelevanceOrderByInput',
]



# recursive assets types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

assetsRelationFilter = TypedDict(
    'assetsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class assetsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class assetsInclude(TypedDict, total=False):
    """assets relational arguments"""


    

class assetsIncludeFromassets(TypedDict, total=False):
    """Relational arguments for assets"""


class assetsIncludeFromassetsRecursive1(TypedDict, total=False):
    """Relational arguments for assets"""


class assetsIncludeFromassetsRecursive2(TypedDict, total=False):
    """Relational arguments for assets"""


class assetsIncludeFromassetsRecursive3(TypedDict, total=False):
    """Relational arguments for assets"""


class assetsIncludeFromassetsRecursive4(TypedDict, total=False):
    """Relational arguments for assets"""

    

class assetsArgsFromassets(TypedDict, total=False):
    """Arguments for assets"""
    include: 'assetsIncludeFromassetsRecursive1'


class assetsArgsFromassetsRecursive1(TypedDict, total=False):
    """Arguments for assets"""
    include: 'assetsIncludeFromassetsRecursive2'


class assetsArgsFromassetsRecursive2(TypedDict, total=False):
    """Arguments for assets"""
    include: 'assetsIncludeFromassetsRecursive3'


class assetsArgsFromassetsRecursive3(TypedDict, total=False):
    """Arguments for assets"""
    include: 'assetsIncludeFromassetsRecursive4'


class assetsArgsFromassetsRecursive4(TypedDict, total=False):
    """Arguments for assets"""
    
    

class FindManyassetsArgsFromassets(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    include: 'assetsIncludeFromassetsRecursive1'


class FindManyassetsArgsFromassetsRecursive1(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    include: 'assetsIncludeFromassetsRecursive2'


class FindManyassetsArgsFromassetsRecursive2(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    include: 'assetsIncludeFromassetsRecursive3'


class FindManyassetsArgsFromassetsRecursive3(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    include: 'assetsIncludeFromassetsRecursive4'


class FindManyassetsArgsFromassetsRecursive4(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    
    

class dayIncludeFromassets(TypedDict, total=False):
    """Relational arguments for assets"""


class dayIncludeFromassetsRecursive1(TypedDict, total=False):
    """Relational arguments for assets"""


class dayIncludeFromassetsRecursive2(TypedDict, total=False):
    """Relational arguments for assets"""


class dayIncludeFromassetsRecursive3(TypedDict, total=False):
    """Relational arguments for assets"""


class dayIncludeFromassetsRecursive4(TypedDict, total=False):
    """Relational arguments for assets"""

    

class dayArgsFromassets(TypedDict, total=False):
    """Arguments for assets"""
    include: 'dayIncludeFromdayRecursive1'


class dayArgsFromassetsRecursive1(TypedDict, total=False):
    """Arguments for assets"""
    include: 'dayIncludeFromdayRecursive2'


class dayArgsFromassetsRecursive2(TypedDict, total=False):
    """Arguments for assets"""
    include: 'dayIncludeFromdayRecursive3'


class dayArgsFromassetsRecursive3(TypedDict, total=False):
    """Arguments for assets"""
    include: 'dayIncludeFromdayRecursive4'


class dayArgsFromassetsRecursive4(TypedDict, total=False):
    """Arguments for assets"""
    
    

class FindManydayArgsFromassets(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    include: 'dayIncludeFromdayRecursive1'


class FindManydayArgsFromassetsRecursive1(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    include: 'dayIncludeFromdayRecursive2'


class FindManydayArgsFromassetsRecursive2(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    include: 'dayIncludeFromdayRecursive3'


class FindManydayArgsFromassetsRecursive3(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    include: 'dayIncludeFromdayRecursive4'


class FindManydayArgsFromassetsRecursive4(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    
    

class monthIncludeFromassets(TypedDict, total=False):
    """Relational arguments for assets"""


class monthIncludeFromassetsRecursive1(TypedDict, total=False):
    """Relational arguments for assets"""


class monthIncludeFromassetsRecursive2(TypedDict, total=False):
    """Relational arguments for assets"""


class monthIncludeFromassetsRecursive3(TypedDict, total=False):
    """Relational arguments for assets"""


class monthIncludeFromassetsRecursive4(TypedDict, total=False):
    """Relational arguments for assets"""

    

class monthArgsFromassets(TypedDict, total=False):
    """Arguments for assets"""
    include: 'monthIncludeFrommonthRecursive1'


class monthArgsFromassetsRecursive1(TypedDict, total=False):
    """Arguments for assets"""
    include: 'monthIncludeFrommonthRecursive2'


class monthArgsFromassetsRecursive2(TypedDict, total=False):
    """Arguments for assets"""
    include: 'monthIncludeFrommonthRecursive3'


class monthArgsFromassetsRecursive3(TypedDict, total=False):
    """Arguments for assets"""
    include: 'monthIncludeFrommonthRecursive4'


class monthArgsFromassetsRecursive4(TypedDict, total=False):
    """Arguments for assets"""
    
    

class FindManymonthArgsFromassets(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    include: 'monthIncludeFrommonthRecursive1'


class FindManymonthArgsFromassetsRecursive1(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    include: 'monthIncludeFrommonthRecursive2'


class FindManymonthArgsFromassetsRecursive2(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    include: 'monthIncludeFrommonthRecursive3'


class FindManymonthArgsFromassetsRecursive3(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    include: 'monthIncludeFrommonthRecursive4'


class FindManymonthArgsFromassetsRecursive4(TypedDict, total=False):
    """Arguments for assets"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    


FindManyassetsArgs = FindManyassetsArgsFromassets
FindFirstassetsArgs = FindManyassetsArgsFromassets


    

class assetsWhereInput(TypedDict, total=False):
    """assets arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[None, _str, 'types.StringFilter']
    asset_class: Union[None, _str, 'types.StringFilter']
    date_added: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['assetsWhereInputRecursive1', List['assetsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['assetsWhereInputRecursive1']
    OR: List['assetsWhereInputRecursive1']
    NOT: List['assetsWhereInputRecursive1']


class assetsWhereInputRecursive1(TypedDict, total=False):
    """assets arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[None, _str, 'types.StringFilter']
    asset_class: Union[None, _str, 'types.StringFilter']
    date_added: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['assetsWhereInputRecursive2', List['assetsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['assetsWhereInputRecursive2']
    OR: List['assetsWhereInputRecursive2']
    NOT: List['assetsWhereInputRecursive2']


class assetsWhereInputRecursive2(TypedDict, total=False):
    """assets arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[None, _str, 'types.StringFilter']
    asset_class: Union[None, _str, 'types.StringFilter']
    date_added: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['assetsWhereInputRecursive3', List['assetsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['assetsWhereInputRecursive3']
    OR: List['assetsWhereInputRecursive3']
    NOT: List['assetsWhereInputRecursive3']


class assetsWhereInputRecursive3(TypedDict, total=False):
    """assets arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[None, _str, 'types.StringFilter']
    asset_class: Union[None, _str, 'types.StringFilter']
    date_added: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['assetsWhereInputRecursive4', List['assetsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['assetsWhereInputRecursive4']
    OR: List['assetsWhereInputRecursive4']
    NOT: List['assetsWhereInputRecursive4']


class assetsWhereInputRecursive4(TypedDict, total=False):
    """assets arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[None, _str, 'types.StringFilter']
    asset_class: Union[None, _str, 'types.StringFilter']
    date_added: Union[None, datetime.datetime, 'types.DateTimeFilter']



# aggregate assets types


    

class assetsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """assets arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    asset_class: Union[_str, 'types.StringWithAggregatesFilter']
    date_added: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['assetsScalarWhereWithAggregatesInputRecursive1']
    OR: List['assetsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['assetsScalarWhereWithAggregatesInputRecursive1']


class assetsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """assets arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    asset_class: Union[_str, 'types.StringWithAggregatesFilter']
    date_added: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['assetsScalarWhereWithAggregatesInputRecursive2']
    OR: List['assetsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['assetsScalarWhereWithAggregatesInputRecursive2']


class assetsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """assets arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    asset_class: Union[_str, 'types.StringWithAggregatesFilter']
    date_added: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['assetsScalarWhereWithAggregatesInputRecursive3']
    OR: List['assetsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['assetsScalarWhereWithAggregatesInputRecursive3']


class assetsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """assets arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    asset_class: Union[_str, 'types.StringWithAggregatesFilter']
    date_added: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['assetsScalarWhereWithAggregatesInputRecursive4']
    OR: List['assetsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['assetsScalarWhereWithAggregatesInputRecursive4']


class assetsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """assets arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    asset_class: Union[_str, 'types.StringWithAggregatesFilter']
    date_added: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class assetsGroupByOutput(TypedDict, total=False):
    id: _int
    symbol: _str
    asset_class: _str
    date_added: datetime.datetime
    _sum: 'assetsSumAggregateOutput'
    _avg: 'assetsAvgAggregateOutput'
    _min: 'assetsMinAggregateOutput'
    _max: 'assetsMaxAggregateOutput'
    _count: 'assetsCountAggregateOutput'


class assetsAvgAggregateOutput(TypedDict, total=False):
    """assets output for aggregating averages"""
    id: float


class assetsSumAggregateOutput(TypedDict, total=False):
    """assets output for aggregating sums"""
    id: _int


class assetsScalarAggregateOutput(TypedDict, total=False):
    """assets output including scalar fields"""
    id: _int
    symbol: _str
    asset_class: _str
    date_added: datetime.datetime


assetsMinAggregateOutput = assetsScalarAggregateOutput
assetsMaxAggregateOutput = assetsScalarAggregateOutput


class assetsMaxAggregateInput(TypedDict, total=False):
    """assets input for aggregating by max"""
    id: bool
    symbol: bool
    asset_class: bool
    date_added: bool


class assetsMinAggregateInput(TypedDict, total=False):
    """assets input for aggregating by min"""
    id: bool
    symbol: bool
    asset_class: bool
    date_added: bool


class assetsNumberAggregateInput(TypedDict, total=False):
    """assets input for aggregating numbers"""
    id: bool


assetsAvgAggregateInput = assetsNumberAggregateInput
assetsSumAggregateInput = assetsNumberAggregateInput


assetsCountAggregateInput = TypedDict(
    'assetsCountAggregateInput',
    {
        'id': bool,
        'symbol': bool,
        'asset_class': bool,
        'date_added': bool,
        '_all': bool,
    },
    total=False,
)

assetsCountAggregateOutput = TypedDict(
    'assetsCountAggregateOutput',
    {
        'id': int,
        'symbol': int,
        'asset_class': int,
        'date_added': int,
        '_all': int,
    },
    total=False,
)


assetsKeys = Literal[
    'id',
    'symbol',
    'asset_class',
    'date_added',
]
assetsScalarFieldKeys = Literal[
    'id',
    'symbol',
    'asset_class',
    'date_added',
]
assetsScalarFieldKeysT = TypeVar('assetsScalarFieldKeysT', bound=assetsScalarFieldKeys)

assetsRelationalFieldKeys = _NoneType

# day types

class dayOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the day create method"""
    id: _int


class dayCreateInput(dayOptionalCreateInput):
    """Required arguments to the day create method"""
    symbol: _str
    open: _float
    high: _float
    low: _float
    close: _float
    volume: _float
    vwap: _float
    date: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class dayOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the day create method, without relations"""
    id: _int


class dayCreateWithoutRelationsInput(dayOptionalCreateWithoutRelationsInput):
    """Required arguments to the day create method, without relations"""
    symbol: _str
    open: _float
    high: _float
    low: _float
    close: _float
    volume: _float
    vwap: _float
    date: datetime.datetime

class dayConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'dayCreateWithoutRelationsInput'
    where: 'dayWhereUniqueInput'

class dayCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'dayCreateWithoutRelationsInput'
    connect: 'dayWhereUniqueInput'
    connect_or_create: 'dayConnectOrCreateWithoutRelationsInput'


class dayCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['dayCreateWithoutRelationsInput', List['dayCreateWithoutRelationsInput']]
    connect: Union['dayWhereUniqueInput', List['dayWhereUniqueInput']]
    connect_or_create: Union['dayConnectOrCreateWithoutRelationsInput', List['dayConnectOrCreateWithoutRelationsInput']]

_dayWhereUnique_id_Input = TypedDict(
    '_dayWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

dayWhereUniqueInput = _dayWhereUnique_id_Input


class dayUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    symbol: _str
    open: Union[AtomicFloatInput, _float]
    high: Union[AtomicFloatInput, _float]
    low: Union[AtomicFloatInput, _float]
    close: Union[AtomicFloatInput, _float]
    volume: Union[AtomicFloatInput, _float]
    vwap: Union[AtomicFloatInput, _float]
    date: datetime.datetime


class dayUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    symbol: _str
    open: Union[AtomicFloatInput, _float]
    high: Union[AtomicFloatInput, _float]
    low: Union[AtomicFloatInput, _float]
    close: Union[AtomicFloatInput, _float]
    volume: Union[AtomicFloatInput, _float]
    vwap: Union[AtomicFloatInput, _float]
    date: datetime.datetime


class dayUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['dayCreateWithoutRelationsInput']
    connect: List['dayWhereUniqueInput']
    connect_or_create: List['dayConnectOrCreateWithoutRelationsInput']
    set: List['dayWhereUniqueInput']
    disconnect: List['dayWhereUniqueInput']
    delete: List['dayWhereUniqueInput']

    # TODO
    # update: List['dayUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['dayUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['dayScalarWhereInput']
    # upsert: List['dayUpserteWithWhereUniqueWithoutRelationsInput']


class dayUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'dayCreateWithoutRelationsInput'
    connect: 'dayWhereUniqueInput'
    connect_or_create: 'dayConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'dayUpdateInput'
    # upsert: 'dayUpsertWithoutRelationsInput'


class dayUpsertInput(TypedDict):
    create: 'dayCreateInput'
    update: 'dayUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_day_id_OrderByInput = TypedDict(
    '_day_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_day_symbol_OrderByInput = TypedDict(
    '_day_symbol_OrderByInput',
    {
        'symbol': 'SortOrder',
    },
    total=True
)

_day_open_OrderByInput = TypedDict(
    '_day_open_OrderByInput',
    {
        'open': 'SortOrder',
    },
    total=True
)

_day_high_OrderByInput = TypedDict(
    '_day_high_OrderByInput',
    {
        'high': 'SortOrder',
    },
    total=True
)

_day_low_OrderByInput = TypedDict(
    '_day_low_OrderByInput',
    {
        'low': 'SortOrder',
    },
    total=True
)

_day_close_OrderByInput = TypedDict(
    '_day_close_OrderByInput',
    {
        'close': 'SortOrder',
    },
    total=True
)

_day_volume_OrderByInput = TypedDict(
    '_day_volume_OrderByInput',
    {
        'volume': 'SortOrder',
    },
    total=True
)

_day_vwap_OrderByInput = TypedDict(
    '_day_vwap_OrderByInput',
    {
        'vwap': 'SortOrder',
    },
    total=True
)

_day_date_OrderByInput = TypedDict(
    '_day_date_OrderByInput',
    {
        'date': 'SortOrder',
    },
    total=True
)

_day_RelevanceInner = TypedDict(
    '_day_RelevanceInner',
    {
        'fields': 'List[dayScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_day_RelevanceOrderByInput = TypedDict(
    '_day_RelevanceOrderByInput',
    {
        '_relevance': '_day_RelevanceInner',
    },
    total=True
)

dayOrderByInput = Union[
    '_day_id_OrderByInput',
    '_day_symbol_OrderByInput',
    '_day_open_OrderByInput',
    '_day_high_OrderByInput',
    '_day_low_OrderByInput',
    '_day_close_OrderByInput',
    '_day_volume_OrderByInput',
    '_day_vwap_OrderByInput',
    '_day_date_OrderByInput',
    '_day_RelevanceOrderByInput',
]



# recursive day types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

dayRelationFilter = TypedDict(
    'dayRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class dayListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class dayInclude(TypedDict, total=False):
    """day relational arguments"""


    

class assetsIncludeFromday(TypedDict, total=False):
    """Relational arguments for day"""


class assetsIncludeFromdayRecursive1(TypedDict, total=False):
    """Relational arguments for day"""


class assetsIncludeFromdayRecursive2(TypedDict, total=False):
    """Relational arguments for day"""


class assetsIncludeFromdayRecursive3(TypedDict, total=False):
    """Relational arguments for day"""


class assetsIncludeFromdayRecursive4(TypedDict, total=False):
    """Relational arguments for day"""

    

class assetsArgsFromday(TypedDict, total=False):
    """Arguments for day"""
    include: 'assetsIncludeFromassetsRecursive1'


class assetsArgsFromdayRecursive1(TypedDict, total=False):
    """Arguments for day"""
    include: 'assetsIncludeFromassetsRecursive2'


class assetsArgsFromdayRecursive2(TypedDict, total=False):
    """Arguments for day"""
    include: 'assetsIncludeFromassetsRecursive3'


class assetsArgsFromdayRecursive3(TypedDict, total=False):
    """Arguments for day"""
    include: 'assetsIncludeFromassetsRecursive4'


class assetsArgsFromdayRecursive4(TypedDict, total=False):
    """Arguments for day"""
    
    

class FindManyassetsArgsFromday(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    include: 'assetsIncludeFromassetsRecursive1'


class FindManyassetsArgsFromdayRecursive1(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    include: 'assetsIncludeFromassetsRecursive2'


class FindManyassetsArgsFromdayRecursive2(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    include: 'assetsIncludeFromassetsRecursive3'


class FindManyassetsArgsFromdayRecursive3(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    include: 'assetsIncludeFromassetsRecursive4'


class FindManyassetsArgsFromdayRecursive4(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    
    

class dayIncludeFromday(TypedDict, total=False):
    """Relational arguments for day"""


class dayIncludeFromdayRecursive1(TypedDict, total=False):
    """Relational arguments for day"""


class dayIncludeFromdayRecursive2(TypedDict, total=False):
    """Relational arguments for day"""


class dayIncludeFromdayRecursive3(TypedDict, total=False):
    """Relational arguments for day"""


class dayIncludeFromdayRecursive4(TypedDict, total=False):
    """Relational arguments for day"""

    

class dayArgsFromday(TypedDict, total=False):
    """Arguments for day"""
    include: 'dayIncludeFromdayRecursive1'


class dayArgsFromdayRecursive1(TypedDict, total=False):
    """Arguments for day"""
    include: 'dayIncludeFromdayRecursive2'


class dayArgsFromdayRecursive2(TypedDict, total=False):
    """Arguments for day"""
    include: 'dayIncludeFromdayRecursive3'


class dayArgsFromdayRecursive3(TypedDict, total=False):
    """Arguments for day"""
    include: 'dayIncludeFromdayRecursive4'


class dayArgsFromdayRecursive4(TypedDict, total=False):
    """Arguments for day"""
    
    

class FindManydayArgsFromday(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    include: 'dayIncludeFromdayRecursive1'


class FindManydayArgsFromdayRecursive1(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    include: 'dayIncludeFromdayRecursive2'


class FindManydayArgsFromdayRecursive2(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    include: 'dayIncludeFromdayRecursive3'


class FindManydayArgsFromdayRecursive3(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    include: 'dayIncludeFromdayRecursive4'


class FindManydayArgsFromdayRecursive4(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    
    

class monthIncludeFromday(TypedDict, total=False):
    """Relational arguments for day"""


class monthIncludeFromdayRecursive1(TypedDict, total=False):
    """Relational arguments for day"""


class monthIncludeFromdayRecursive2(TypedDict, total=False):
    """Relational arguments for day"""


class monthIncludeFromdayRecursive3(TypedDict, total=False):
    """Relational arguments for day"""


class monthIncludeFromdayRecursive4(TypedDict, total=False):
    """Relational arguments for day"""

    

class monthArgsFromday(TypedDict, total=False):
    """Arguments for day"""
    include: 'monthIncludeFrommonthRecursive1'


class monthArgsFromdayRecursive1(TypedDict, total=False):
    """Arguments for day"""
    include: 'monthIncludeFrommonthRecursive2'


class monthArgsFromdayRecursive2(TypedDict, total=False):
    """Arguments for day"""
    include: 'monthIncludeFrommonthRecursive3'


class monthArgsFromdayRecursive3(TypedDict, total=False):
    """Arguments for day"""
    include: 'monthIncludeFrommonthRecursive4'


class monthArgsFromdayRecursive4(TypedDict, total=False):
    """Arguments for day"""
    
    

class FindManymonthArgsFromday(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    include: 'monthIncludeFrommonthRecursive1'


class FindManymonthArgsFromdayRecursive1(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    include: 'monthIncludeFrommonthRecursive2'


class FindManymonthArgsFromdayRecursive2(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    include: 'monthIncludeFrommonthRecursive3'


class FindManymonthArgsFromdayRecursive3(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    include: 'monthIncludeFrommonthRecursive4'


class FindManymonthArgsFromdayRecursive4(TypedDict, total=False):
    """Arguments for day"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    


FindManydayArgs = FindManydayArgsFromday
FindFirstdayArgs = FindManydayArgsFromday


    

class dayWhereInput(TypedDict, total=False):
    """day arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    open: Union[_float, 'types.FloatFilter']
    high: Union[_float, 'types.FloatFilter']
    low: Union[_float, 'types.FloatFilter']
    close: Union[_float, 'types.FloatFilter']
    volume: Union[_float, 'types.FloatFilter']
    vwap: Union[_float, 'types.FloatFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['dayWhereInputRecursive1', List['dayWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['dayWhereInputRecursive1']
    OR: List['dayWhereInputRecursive1']
    NOT: List['dayWhereInputRecursive1']


class dayWhereInputRecursive1(TypedDict, total=False):
    """day arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    open: Union[_float, 'types.FloatFilter']
    high: Union[_float, 'types.FloatFilter']
    low: Union[_float, 'types.FloatFilter']
    close: Union[_float, 'types.FloatFilter']
    volume: Union[_float, 'types.FloatFilter']
    vwap: Union[_float, 'types.FloatFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['dayWhereInputRecursive2', List['dayWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['dayWhereInputRecursive2']
    OR: List['dayWhereInputRecursive2']
    NOT: List['dayWhereInputRecursive2']


class dayWhereInputRecursive2(TypedDict, total=False):
    """day arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    open: Union[_float, 'types.FloatFilter']
    high: Union[_float, 'types.FloatFilter']
    low: Union[_float, 'types.FloatFilter']
    close: Union[_float, 'types.FloatFilter']
    volume: Union[_float, 'types.FloatFilter']
    vwap: Union[_float, 'types.FloatFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['dayWhereInputRecursive3', List['dayWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['dayWhereInputRecursive3']
    OR: List['dayWhereInputRecursive3']
    NOT: List['dayWhereInputRecursive3']


class dayWhereInputRecursive3(TypedDict, total=False):
    """day arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    open: Union[_float, 'types.FloatFilter']
    high: Union[_float, 'types.FloatFilter']
    low: Union[_float, 'types.FloatFilter']
    close: Union[_float, 'types.FloatFilter']
    volume: Union[_float, 'types.FloatFilter']
    vwap: Union[_float, 'types.FloatFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['dayWhereInputRecursive4', List['dayWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['dayWhereInputRecursive4']
    OR: List['dayWhereInputRecursive4']
    NOT: List['dayWhereInputRecursive4']


class dayWhereInputRecursive4(TypedDict, total=False):
    """day arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    open: Union[_float, 'types.FloatFilter']
    high: Union[_float, 'types.FloatFilter']
    low: Union[_float, 'types.FloatFilter']
    close: Union[_float, 'types.FloatFilter']
    volume: Union[_float, 'types.FloatFilter']
    vwap: Union[_float, 'types.FloatFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate day types


    

class dayScalarWhereWithAggregatesInput(TypedDict, total=False):
    """day arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    open: Union[_float, 'types.FloatWithAggregatesFilter']
    high: Union[_float, 'types.FloatWithAggregatesFilter']
    low: Union[_float, 'types.FloatWithAggregatesFilter']
    close: Union[_float, 'types.FloatWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    vwap: Union[_float, 'types.FloatWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['dayScalarWhereWithAggregatesInputRecursive1']
    OR: List['dayScalarWhereWithAggregatesInputRecursive1']
    NOT: List['dayScalarWhereWithAggregatesInputRecursive1']


class dayScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """day arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    open: Union[_float, 'types.FloatWithAggregatesFilter']
    high: Union[_float, 'types.FloatWithAggregatesFilter']
    low: Union[_float, 'types.FloatWithAggregatesFilter']
    close: Union[_float, 'types.FloatWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    vwap: Union[_float, 'types.FloatWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['dayScalarWhereWithAggregatesInputRecursive2']
    OR: List['dayScalarWhereWithAggregatesInputRecursive2']
    NOT: List['dayScalarWhereWithAggregatesInputRecursive2']


class dayScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """day arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    open: Union[_float, 'types.FloatWithAggregatesFilter']
    high: Union[_float, 'types.FloatWithAggregatesFilter']
    low: Union[_float, 'types.FloatWithAggregatesFilter']
    close: Union[_float, 'types.FloatWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    vwap: Union[_float, 'types.FloatWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['dayScalarWhereWithAggregatesInputRecursive3']
    OR: List['dayScalarWhereWithAggregatesInputRecursive3']
    NOT: List['dayScalarWhereWithAggregatesInputRecursive3']


class dayScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """day arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    open: Union[_float, 'types.FloatWithAggregatesFilter']
    high: Union[_float, 'types.FloatWithAggregatesFilter']
    low: Union[_float, 'types.FloatWithAggregatesFilter']
    close: Union[_float, 'types.FloatWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    vwap: Union[_float, 'types.FloatWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['dayScalarWhereWithAggregatesInputRecursive4']
    OR: List['dayScalarWhereWithAggregatesInputRecursive4']
    NOT: List['dayScalarWhereWithAggregatesInputRecursive4']


class dayScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """day arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    open: Union[_float, 'types.FloatWithAggregatesFilter']
    high: Union[_float, 'types.FloatWithAggregatesFilter']
    low: Union[_float, 'types.FloatWithAggregatesFilter']
    close: Union[_float, 'types.FloatWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    vwap: Union[_float, 'types.FloatWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class dayGroupByOutput(TypedDict, total=False):
    id: _int
    symbol: _str
    open: _float
    high: _float
    low: _float
    close: _float
    volume: _float
    vwap: _float
    date: datetime.datetime
    _sum: 'daySumAggregateOutput'
    _avg: 'dayAvgAggregateOutput'
    _min: 'dayMinAggregateOutput'
    _max: 'dayMaxAggregateOutput'
    _count: 'dayCountAggregateOutput'


class dayAvgAggregateOutput(TypedDict, total=False):
    """day output for aggregating averages"""
    id: float
    open: float
    high: float
    low: float
    close: float
    volume: float
    vwap: float


class daySumAggregateOutput(TypedDict, total=False):
    """day output for aggregating sums"""
    id: _int
    open: _float
    high: _float
    low: _float
    close: _float
    volume: _float
    vwap: _float


class dayScalarAggregateOutput(TypedDict, total=False):
    """day output including scalar fields"""
    id: _int
    symbol: _str
    open: _float
    high: _float
    low: _float
    close: _float
    volume: _float
    vwap: _float
    date: datetime.datetime


dayMinAggregateOutput = dayScalarAggregateOutput
dayMaxAggregateOutput = dayScalarAggregateOutput


class dayMaxAggregateInput(TypedDict, total=False):
    """day input for aggregating by max"""
    id: bool
    symbol: bool
    open: bool
    high: bool
    low: bool
    close: bool
    volume: bool
    vwap: bool
    date: bool


class dayMinAggregateInput(TypedDict, total=False):
    """day input for aggregating by min"""
    id: bool
    symbol: bool
    open: bool
    high: bool
    low: bool
    close: bool
    volume: bool
    vwap: bool
    date: bool


class dayNumberAggregateInput(TypedDict, total=False):
    """day input for aggregating numbers"""
    id: bool
    open: bool
    high: bool
    low: bool
    close: bool
    volume: bool
    vwap: bool


dayAvgAggregateInput = dayNumberAggregateInput
daySumAggregateInput = dayNumberAggregateInput


dayCountAggregateInput = TypedDict(
    'dayCountAggregateInput',
    {
        'id': bool,
        'symbol': bool,
        'open': bool,
        'high': bool,
        'low': bool,
        'close': bool,
        'volume': bool,
        'vwap': bool,
        'date': bool,
        '_all': bool,
    },
    total=False,
)

dayCountAggregateOutput = TypedDict(
    'dayCountAggregateOutput',
    {
        'id': int,
        'symbol': int,
        'open': int,
        'high': int,
        'low': int,
        'close': int,
        'volume': int,
        'vwap': int,
        'date': int,
        '_all': int,
    },
    total=False,
)


dayKeys = Literal[
    'id',
    'symbol',
    'open',
    'high',
    'low',
    'close',
    'volume',
    'vwap',
    'date',
]
dayScalarFieldKeys = Literal[
    'id',
    'symbol',
    'open',
    'high',
    'low',
    'close',
    'volume',
    'vwap',
    'date',
]
dayScalarFieldKeysT = TypeVar('dayScalarFieldKeysT', bound=dayScalarFieldKeys)

dayRelationalFieldKeys = _NoneType

# month types

class monthOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the month create method"""
    id: _int


class monthCreateInput(monthOptionalCreateInput):
    """Required arguments to the month create method"""
    symbol: _str
    open: _float
    high: _float
    low: _float
    close: _float
    volume: _float
    vwap: _float
    date: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class monthOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the month create method, without relations"""
    id: _int


class monthCreateWithoutRelationsInput(monthOptionalCreateWithoutRelationsInput):
    """Required arguments to the month create method, without relations"""
    symbol: _str
    open: _float
    high: _float
    low: _float
    close: _float
    volume: _float
    vwap: _float
    date: datetime.datetime

class monthConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'monthCreateWithoutRelationsInput'
    where: 'monthWhereUniqueInput'

class monthCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'monthCreateWithoutRelationsInput'
    connect: 'monthWhereUniqueInput'
    connect_or_create: 'monthConnectOrCreateWithoutRelationsInput'


class monthCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['monthCreateWithoutRelationsInput', List['monthCreateWithoutRelationsInput']]
    connect: Union['monthWhereUniqueInput', List['monthWhereUniqueInput']]
    connect_or_create: Union['monthConnectOrCreateWithoutRelationsInput', List['monthConnectOrCreateWithoutRelationsInput']]

_monthWhereUnique_id_Input = TypedDict(
    '_monthWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

monthWhereUniqueInput = _monthWhereUnique_id_Input


class monthUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    symbol: _str
    open: Union[AtomicFloatInput, _float]
    high: Union[AtomicFloatInput, _float]
    low: Union[AtomicFloatInput, _float]
    close: Union[AtomicFloatInput, _float]
    volume: Union[AtomicFloatInput, _float]
    vwap: Union[AtomicFloatInput, _float]
    date: datetime.datetime


class monthUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    symbol: _str
    open: Union[AtomicFloatInput, _float]
    high: Union[AtomicFloatInput, _float]
    low: Union[AtomicFloatInput, _float]
    close: Union[AtomicFloatInput, _float]
    volume: Union[AtomicFloatInput, _float]
    vwap: Union[AtomicFloatInput, _float]
    date: datetime.datetime


class monthUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['monthCreateWithoutRelationsInput']
    connect: List['monthWhereUniqueInput']
    connect_or_create: List['monthConnectOrCreateWithoutRelationsInput']
    set: List['monthWhereUniqueInput']
    disconnect: List['monthWhereUniqueInput']
    delete: List['monthWhereUniqueInput']

    # TODO
    # update: List['monthUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['monthUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['monthScalarWhereInput']
    # upsert: List['monthUpserteWithWhereUniqueWithoutRelationsInput']


class monthUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'monthCreateWithoutRelationsInput'
    connect: 'monthWhereUniqueInput'
    connect_or_create: 'monthConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'monthUpdateInput'
    # upsert: 'monthUpsertWithoutRelationsInput'


class monthUpsertInput(TypedDict):
    create: 'monthCreateInput'
    update: 'monthUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_month_id_OrderByInput = TypedDict(
    '_month_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_month_symbol_OrderByInput = TypedDict(
    '_month_symbol_OrderByInput',
    {
        'symbol': 'SortOrder',
    },
    total=True
)

_month_open_OrderByInput = TypedDict(
    '_month_open_OrderByInput',
    {
        'open': 'SortOrder',
    },
    total=True
)

_month_high_OrderByInput = TypedDict(
    '_month_high_OrderByInput',
    {
        'high': 'SortOrder',
    },
    total=True
)

_month_low_OrderByInput = TypedDict(
    '_month_low_OrderByInput',
    {
        'low': 'SortOrder',
    },
    total=True
)

_month_close_OrderByInput = TypedDict(
    '_month_close_OrderByInput',
    {
        'close': 'SortOrder',
    },
    total=True
)

_month_volume_OrderByInput = TypedDict(
    '_month_volume_OrderByInput',
    {
        'volume': 'SortOrder',
    },
    total=True
)

_month_vwap_OrderByInput = TypedDict(
    '_month_vwap_OrderByInput',
    {
        'vwap': 'SortOrder',
    },
    total=True
)

_month_date_OrderByInput = TypedDict(
    '_month_date_OrderByInput',
    {
        'date': 'SortOrder',
    },
    total=True
)

_month_RelevanceInner = TypedDict(
    '_month_RelevanceInner',
    {
        'fields': 'List[monthScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_month_RelevanceOrderByInput = TypedDict(
    '_month_RelevanceOrderByInput',
    {
        '_relevance': '_month_RelevanceInner',
    },
    total=True
)

monthOrderByInput = Union[
    '_month_id_OrderByInput',
    '_month_symbol_OrderByInput',
    '_month_open_OrderByInput',
    '_month_high_OrderByInput',
    '_month_low_OrderByInput',
    '_month_close_OrderByInput',
    '_month_volume_OrderByInput',
    '_month_vwap_OrderByInput',
    '_month_date_OrderByInput',
    '_month_RelevanceOrderByInput',
]



# recursive month types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

monthRelationFilter = TypedDict(
    'monthRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class monthListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class monthInclude(TypedDict, total=False):
    """month relational arguments"""


    

class assetsIncludeFrommonth(TypedDict, total=False):
    """Relational arguments for month"""


class assetsIncludeFrommonthRecursive1(TypedDict, total=False):
    """Relational arguments for month"""


class assetsIncludeFrommonthRecursive2(TypedDict, total=False):
    """Relational arguments for month"""


class assetsIncludeFrommonthRecursive3(TypedDict, total=False):
    """Relational arguments for month"""


class assetsIncludeFrommonthRecursive4(TypedDict, total=False):
    """Relational arguments for month"""

    

class assetsArgsFrommonth(TypedDict, total=False):
    """Arguments for month"""
    include: 'assetsIncludeFromassetsRecursive1'


class assetsArgsFrommonthRecursive1(TypedDict, total=False):
    """Arguments for month"""
    include: 'assetsIncludeFromassetsRecursive2'


class assetsArgsFrommonthRecursive2(TypedDict, total=False):
    """Arguments for month"""
    include: 'assetsIncludeFromassetsRecursive3'


class assetsArgsFrommonthRecursive3(TypedDict, total=False):
    """Arguments for month"""
    include: 'assetsIncludeFromassetsRecursive4'


class assetsArgsFrommonthRecursive4(TypedDict, total=False):
    """Arguments for month"""
    
    

class FindManyassetsArgsFrommonth(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    include: 'assetsIncludeFromassetsRecursive1'


class FindManyassetsArgsFrommonthRecursive1(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    include: 'assetsIncludeFromassetsRecursive2'


class FindManyassetsArgsFrommonthRecursive2(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    include: 'assetsIncludeFromassetsRecursive3'


class FindManyassetsArgsFrommonthRecursive3(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    include: 'assetsIncludeFromassetsRecursive4'


class FindManyassetsArgsFrommonthRecursive4(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['assetsOrderByInput', List['assetsOrderByInput']]
    where: 'assetsWhereInput'
    cursor: 'assetsWhereUniqueInput'
    distinct: List['assetsScalarFieldKeys']
    
    

class dayIncludeFrommonth(TypedDict, total=False):
    """Relational arguments for month"""


class dayIncludeFrommonthRecursive1(TypedDict, total=False):
    """Relational arguments for month"""


class dayIncludeFrommonthRecursive2(TypedDict, total=False):
    """Relational arguments for month"""


class dayIncludeFrommonthRecursive3(TypedDict, total=False):
    """Relational arguments for month"""


class dayIncludeFrommonthRecursive4(TypedDict, total=False):
    """Relational arguments for month"""

    

class dayArgsFrommonth(TypedDict, total=False):
    """Arguments for month"""
    include: 'dayIncludeFromdayRecursive1'


class dayArgsFrommonthRecursive1(TypedDict, total=False):
    """Arguments for month"""
    include: 'dayIncludeFromdayRecursive2'


class dayArgsFrommonthRecursive2(TypedDict, total=False):
    """Arguments for month"""
    include: 'dayIncludeFromdayRecursive3'


class dayArgsFrommonthRecursive3(TypedDict, total=False):
    """Arguments for month"""
    include: 'dayIncludeFromdayRecursive4'


class dayArgsFrommonthRecursive4(TypedDict, total=False):
    """Arguments for month"""
    
    

class FindManydayArgsFrommonth(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    include: 'dayIncludeFromdayRecursive1'


class FindManydayArgsFrommonthRecursive1(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    include: 'dayIncludeFromdayRecursive2'


class FindManydayArgsFrommonthRecursive2(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    include: 'dayIncludeFromdayRecursive3'


class FindManydayArgsFrommonthRecursive3(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    include: 'dayIncludeFromdayRecursive4'


class FindManydayArgsFrommonthRecursive4(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['dayOrderByInput', List['dayOrderByInput']]
    where: 'dayWhereInput'
    cursor: 'dayWhereUniqueInput'
    distinct: List['dayScalarFieldKeys']
    
    

class monthIncludeFrommonth(TypedDict, total=False):
    """Relational arguments for month"""


class monthIncludeFrommonthRecursive1(TypedDict, total=False):
    """Relational arguments for month"""


class monthIncludeFrommonthRecursive2(TypedDict, total=False):
    """Relational arguments for month"""


class monthIncludeFrommonthRecursive3(TypedDict, total=False):
    """Relational arguments for month"""


class monthIncludeFrommonthRecursive4(TypedDict, total=False):
    """Relational arguments for month"""

    

class monthArgsFrommonth(TypedDict, total=False):
    """Arguments for month"""
    include: 'monthIncludeFrommonthRecursive1'


class monthArgsFrommonthRecursive1(TypedDict, total=False):
    """Arguments for month"""
    include: 'monthIncludeFrommonthRecursive2'


class monthArgsFrommonthRecursive2(TypedDict, total=False):
    """Arguments for month"""
    include: 'monthIncludeFrommonthRecursive3'


class monthArgsFrommonthRecursive3(TypedDict, total=False):
    """Arguments for month"""
    include: 'monthIncludeFrommonthRecursive4'


class monthArgsFrommonthRecursive4(TypedDict, total=False):
    """Arguments for month"""
    
    

class FindManymonthArgsFrommonth(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    include: 'monthIncludeFrommonthRecursive1'


class FindManymonthArgsFrommonthRecursive1(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    include: 'monthIncludeFrommonthRecursive2'


class FindManymonthArgsFrommonthRecursive2(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    include: 'monthIncludeFrommonthRecursive3'


class FindManymonthArgsFrommonthRecursive3(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    include: 'monthIncludeFrommonthRecursive4'


class FindManymonthArgsFrommonthRecursive4(TypedDict, total=False):
    """Arguments for month"""
    take: int
    skip: int
    order_by: Union['monthOrderByInput', List['monthOrderByInput']]
    where: 'monthWhereInput'
    cursor: 'monthWhereUniqueInput'
    distinct: List['monthScalarFieldKeys']
    


FindManymonthArgs = FindManymonthArgsFrommonth
FindFirstmonthArgs = FindManymonthArgsFrommonth


    

class monthWhereInput(TypedDict, total=False):
    """month arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    open: Union[_float, 'types.FloatFilter']
    high: Union[_float, 'types.FloatFilter']
    low: Union[_float, 'types.FloatFilter']
    close: Union[_float, 'types.FloatFilter']
    volume: Union[_float, 'types.FloatFilter']
    vwap: Union[_float, 'types.FloatFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['monthWhereInputRecursive1', List['monthWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['monthWhereInputRecursive1']
    OR: List['monthWhereInputRecursive1']
    NOT: List['monthWhereInputRecursive1']


class monthWhereInputRecursive1(TypedDict, total=False):
    """month arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    open: Union[_float, 'types.FloatFilter']
    high: Union[_float, 'types.FloatFilter']
    low: Union[_float, 'types.FloatFilter']
    close: Union[_float, 'types.FloatFilter']
    volume: Union[_float, 'types.FloatFilter']
    vwap: Union[_float, 'types.FloatFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['monthWhereInputRecursive2', List['monthWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['monthWhereInputRecursive2']
    OR: List['monthWhereInputRecursive2']
    NOT: List['monthWhereInputRecursive2']


class monthWhereInputRecursive2(TypedDict, total=False):
    """month arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    open: Union[_float, 'types.FloatFilter']
    high: Union[_float, 'types.FloatFilter']
    low: Union[_float, 'types.FloatFilter']
    close: Union[_float, 'types.FloatFilter']
    volume: Union[_float, 'types.FloatFilter']
    vwap: Union[_float, 'types.FloatFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['monthWhereInputRecursive3', List['monthWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['monthWhereInputRecursive3']
    OR: List['monthWhereInputRecursive3']
    NOT: List['monthWhereInputRecursive3']


class monthWhereInputRecursive3(TypedDict, total=False):
    """month arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    open: Union[_float, 'types.FloatFilter']
    high: Union[_float, 'types.FloatFilter']
    low: Union[_float, 'types.FloatFilter']
    close: Union[_float, 'types.FloatFilter']
    volume: Union[_float, 'types.FloatFilter']
    vwap: Union[_float, 'types.FloatFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['monthWhereInputRecursive4', List['monthWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['monthWhereInputRecursive4']
    OR: List['monthWhereInputRecursive4']
    NOT: List['monthWhereInputRecursive4']


class monthWhereInputRecursive4(TypedDict, total=False):
    """month arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    symbol: Union[_str, 'types.StringFilter']
    open: Union[_float, 'types.FloatFilter']
    high: Union[_float, 'types.FloatFilter']
    low: Union[_float, 'types.FloatFilter']
    close: Union[_float, 'types.FloatFilter']
    volume: Union[_float, 'types.FloatFilter']
    vwap: Union[_float, 'types.FloatFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate month types


    

class monthScalarWhereWithAggregatesInput(TypedDict, total=False):
    """month arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    open: Union[_float, 'types.FloatWithAggregatesFilter']
    high: Union[_float, 'types.FloatWithAggregatesFilter']
    low: Union[_float, 'types.FloatWithAggregatesFilter']
    close: Union[_float, 'types.FloatWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    vwap: Union[_float, 'types.FloatWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['monthScalarWhereWithAggregatesInputRecursive1']
    OR: List['monthScalarWhereWithAggregatesInputRecursive1']
    NOT: List['monthScalarWhereWithAggregatesInputRecursive1']


class monthScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """month arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    open: Union[_float, 'types.FloatWithAggregatesFilter']
    high: Union[_float, 'types.FloatWithAggregatesFilter']
    low: Union[_float, 'types.FloatWithAggregatesFilter']
    close: Union[_float, 'types.FloatWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    vwap: Union[_float, 'types.FloatWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['monthScalarWhereWithAggregatesInputRecursive2']
    OR: List['monthScalarWhereWithAggregatesInputRecursive2']
    NOT: List['monthScalarWhereWithAggregatesInputRecursive2']


class monthScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """month arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    open: Union[_float, 'types.FloatWithAggregatesFilter']
    high: Union[_float, 'types.FloatWithAggregatesFilter']
    low: Union[_float, 'types.FloatWithAggregatesFilter']
    close: Union[_float, 'types.FloatWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    vwap: Union[_float, 'types.FloatWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['monthScalarWhereWithAggregatesInputRecursive3']
    OR: List['monthScalarWhereWithAggregatesInputRecursive3']
    NOT: List['monthScalarWhereWithAggregatesInputRecursive3']


class monthScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """month arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    open: Union[_float, 'types.FloatWithAggregatesFilter']
    high: Union[_float, 'types.FloatWithAggregatesFilter']
    low: Union[_float, 'types.FloatWithAggregatesFilter']
    close: Union[_float, 'types.FloatWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    vwap: Union[_float, 'types.FloatWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['monthScalarWhereWithAggregatesInputRecursive4']
    OR: List['monthScalarWhereWithAggregatesInputRecursive4']
    NOT: List['monthScalarWhereWithAggregatesInputRecursive4']


class monthScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """month arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    symbol: Union[_str, 'types.StringWithAggregatesFilter']
    open: Union[_float, 'types.FloatWithAggregatesFilter']
    high: Union[_float, 'types.FloatWithAggregatesFilter']
    low: Union[_float, 'types.FloatWithAggregatesFilter']
    close: Union[_float, 'types.FloatWithAggregatesFilter']
    volume: Union[_float, 'types.FloatWithAggregatesFilter']
    vwap: Union[_float, 'types.FloatWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class monthGroupByOutput(TypedDict, total=False):
    id: _int
    symbol: _str
    open: _float
    high: _float
    low: _float
    close: _float
    volume: _float
    vwap: _float
    date: datetime.datetime
    _sum: 'monthSumAggregateOutput'
    _avg: 'monthAvgAggregateOutput'
    _min: 'monthMinAggregateOutput'
    _max: 'monthMaxAggregateOutput'
    _count: 'monthCountAggregateOutput'


class monthAvgAggregateOutput(TypedDict, total=False):
    """month output for aggregating averages"""
    id: float
    open: float
    high: float
    low: float
    close: float
    volume: float
    vwap: float


class monthSumAggregateOutput(TypedDict, total=False):
    """month output for aggregating sums"""
    id: _int
    open: _float
    high: _float
    low: _float
    close: _float
    volume: _float
    vwap: _float


class monthScalarAggregateOutput(TypedDict, total=False):
    """month output including scalar fields"""
    id: _int
    symbol: _str
    open: _float
    high: _float
    low: _float
    close: _float
    volume: _float
    vwap: _float
    date: datetime.datetime


monthMinAggregateOutput = monthScalarAggregateOutput
monthMaxAggregateOutput = monthScalarAggregateOutput


class monthMaxAggregateInput(TypedDict, total=False):
    """month input for aggregating by max"""
    id: bool
    symbol: bool
    open: bool
    high: bool
    low: bool
    close: bool
    volume: bool
    vwap: bool
    date: bool


class monthMinAggregateInput(TypedDict, total=False):
    """month input for aggregating by min"""
    id: bool
    symbol: bool
    open: bool
    high: bool
    low: bool
    close: bool
    volume: bool
    vwap: bool
    date: bool


class monthNumberAggregateInput(TypedDict, total=False):
    """month input for aggregating numbers"""
    id: bool
    open: bool
    high: bool
    low: bool
    close: bool
    volume: bool
    vwap: bool


monthAvgAggregateInput = monthNumberAggregateInput
monthSumAggregateInput = monthNumberAggregateInput


monthCountAggregateInput = TypedDict(
    'monthCountAggregateInput',
    {
        'id': bool,
        'symbol': bool,
        'open': bool,
        'high': bool,
        'low': bool,
        'close': bool,
        'volume': bool,
        'vwap': bool,
        'date': bool,
        '_all': bool,
    },
    total=False,
)

monthCountAggregateOutput = TypedDict(
    'monthCountAggregateOutput',
    {
        'id': int,
        'symbol': int,
        'open': int,
        'high': int,
        'low': int,
        'close': int,
        'volume': int,
        'vwap': int,
        'date': int,
        '_all': int,
    },
    total=False,
)


monthKeys = Literal[
    'id',
    'symbol',
    'open',
    'high',
    'low',
    'close',
    'volume',
    'vwap',
    'date',
]
monthScalarFieldKeys = Literal[
    'id',
    'symbol',
    'open',
    'high',
    'low',
    'close',
    'volume',
    'vwap',
    'date',
]
monthScalarFieldKeysT = TypeVar('monthScalarFieldKeysT', bound=monthScalarFieldKeys)

monthRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields