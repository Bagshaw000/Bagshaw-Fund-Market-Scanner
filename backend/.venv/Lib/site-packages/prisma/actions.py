# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class assetsActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.assets]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await assets.prisma().query_raw(
            'SELECT * FROM assets WHERE id = $1',
            1103527590,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.assets
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await assets.prisma().query_first(
            'SELECT * FROM assets WHERE symbol = $1',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.assetsCreateInput,
        include: Optional[types.assetsInclude] = None
    ) -> _PrismaModelT:
        """Create a new assets record.

        Parameters
        ----------
        data
            assets record data
        include
            Specifies which relations should be loaded on the returned assets model

        Returns
        -------
        prisma.models.assets
            The created assets record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a assets record from just the required fields
        assets = await assets.prisma().create(
            data={
                # data to create a assets record
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.assetsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple assets records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of assets record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await assets.prisma().create_many(
            data=[
                {
                    # data to create a assets record
                },
                {
                    # data to create a assets record
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.assetsWhereUniqueInput,
        include: Optional[types.assetsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single assets record.

        Parameters
        ----------
        where
            assets filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned assets model

        Returns
        -------
        prisma.models.assets
            The deleted assets record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assets = await assets.prisma().delete(
            where={
                'id': 662824084,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.assetsWhereUniqueInput,
        include: Optional[types.assetsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique assets record.

        Parameters
        ----------
        where
            assets filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned assets model

        Returns
        -------
        prisma.models.assets
            The found assets record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assets = await assets.prisma().find_unique(
            where={
                'id': 1147902781,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.assetsWhereUniqueInput,
        include: Optional[types.assetsInclude] = None
    ) -> _PrismaModelT:
        """Find a unique assets record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            assets filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned assets model

        Returns
        -------
        prisma.models.assets
            The found assets record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assets = await assets.prisma().find_unique_or_raise(
            where={
                'id': 2035015474,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.assetsWhereInput] = None,
        cursor: Optional[types.assetsWhereUniqueInput] = None,
        include: Optional[types.assetsInclude] = None,
        order: Optional[Union[types.assetsOrderByInput, List[types.assetsOrderByInput]]] = None,
        distinct: Optional[List[types.assetsScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple assets records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of assets records returned
        skip
            Ignore the first N results
        where
            assets filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned assets model
        order
            Order the returned assets records by any field
        distinct
            Filter assets records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.assets]
            The list of all assets records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 assets records
        assets = await assets.prisma().find_many(take=10)

        # find the first 5 assets records ordered by the asset_class field
        assets = await assets.prisma().find_many(
            take=5,
            order={
                'asset_class': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.assetsWhereInput] = None,
        cursor: Optional[types.assetsWhereUniqueInput] = None,
        include: Optional[types.assetsInclude] = None,
        order: Optional[Union[types.assetsOrderByInput, List[types.assetsOrderByInput]]] = None,
        distinct: Optional[List[types.assetsScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single assets record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            assets filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned assets model
        order
            Order the returned assets records by any field
        distinct
            Filter assets records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.assets
            The first assets record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second assets record ordered by the date_added field
        assets = await assets.prisma().find_first(
            skip=1,
            order={
                'date_added': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.assetsWhereInput] = None,
        cursor: Optional[types.assetsWhereUniqueInput] = None,
        include: Optional[types.assetsInclude] = None,
        order: Optional[Union[types.assetsOrderByInput, List[types.assetsOrderByInput]]] = None,
        distinct: Optional[List[types.assetsScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single assets record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            assets filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned assets model
        order
            Order the returned assets records by any field
        distinct
            Filter assets records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.assets
            The first assets record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second assets record ordered by the id field
        assets = await assets.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.assetsUpdateInput,
        where: types.assetsWhereUniqueInput,
        include: Optional[types.assetsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single assets record.

        Parameters
        ----------
        data
            assets record data specifying what to update
        where
            assets filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned assets model

        Returns
        -------
        prisma.models.assets
            The updated assets record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        assets = await assets.prisma().update(
            where={
                'id': 368800899,
            },
            data={
                # data to update the assets record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.assetsWhereUniqueInput,
        data: types.assetsUpsertInput,
        include: Optional[types.assetsInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            assets filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned assets model

        Returns
        -------
        prisma.models.assets
            The created or updated assets record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assets = await assets.prisma().upsert(
            where={
                'id': 1508029952,
            },
            data={
                'create': {
                    'id': 1508029952,
                },
                'update': {
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.assetsUpdateManyMutationInput,
        where: types.assetsWhereInput,
    ) -> int:
        """Update multiple assets records

        Parameters
        ----------
        data
            assets data to update the selected assets records to
        where
            Filter to select the assets records to update

        Returns
        -------
        int
            The total number of assets records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all assets records
        total = await assets.prisma().update_many(
            data={
                'symbol': 'eigcfgbif'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.assetsWhereInput] = None,
        cursor: Optional[types.assetsWhereUniqueInput] = None,
    ) -> int:
        """Count the number of assets records present in the database

        Parameters
        ----------
        select
            Select the assets fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            assets filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.assetsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await assets.prisma().count()

        # results: prisma.types.assetsCountAggregateOutput
        results = await assets.prisma().count(
            select={
                '_all': True,
                'asset_class': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.assetsCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.assetsWhereInput] = None,
        cursor: Optional[types.assetsWhereUniqueInput] = None,
    ) -> types.assetsCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.assetsCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.assetsWhereInput] = None,
        cursor: Optional[types.assetsWhereUniqueInput] = None,
    ) -> Union[int, types.assetsCountAggregateOutput]:
        """Count the number of assets records present in the database

        Parameters
        ----------
        select
            Select the assets fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            assets filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.assetsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await assets.prisma().count()

        # results: prisma.types.assetsCountAggregateOutput
        results = await assets.prisma().count(
            select={
                '_all': True,
                'date_added': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.assetsCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.assetsWhereInput] = None
    ) -> int:
        """Delete multiple assets records.

        Parameters
        ----------
        where
            Optional assets filter to find the records to be deleted

        Returns
        -------
        int
            The total number of assets records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all assets records
        total = await assets.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.assetsScalarFieldKeys'],
        *,
        where: Optional['types.assetsWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.assetsAvgAggregateInput'] = None,
        sum: Optional['types.assetsSumAggregateInput'] = None,
        min: Optional['types.assetsMinAggregateInput'] = None,
        max: Optional['types.assetsMaxAggregateInput'] = None,
        having: Optional['types.assetsScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.assetsCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.assetsScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.assetsScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.assetsGroupByOutput']:
        """Group assets records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar assets fields to group records by
        where
            assets filter to select records
        take
            Limit the maximum number of assets records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.assetsGroupByOutput]
            A list of dictionaries representing the assets record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group assets records by id values
        # and count how many records are in each group
        results = await assets.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class dayActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.day]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await day.prisma().query_raw(
            'SELECT * FROM day WHERE id = $1',
            1062517886,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.day
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await day.prisma().query_first(
            'SELECT * FROM day WHERE symbol = $1',
            'cghideieh',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.dayCreateInput,
        include: Optional[types.dayInclude] = None
    ) -> _PrismaModelT:
        """Create a new day record.

        Parameters
        ----------
        data
            day record data
        include
            Specifies which relations should be loaded on the returned day model

        Returns
        -------
        prisma.models.day
            The created day record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a day record from just the required fields
        day = await day.prisma().create(
            data={
                # data to create a day record
                'symbol': 'biabhbdai',
                'open': 836760821.59533,
                'high': 790425851.211191,
                'low': 1149758321.164428,
                'close': 1388290519.164741,
                'volume': 1675546029.176727,
                'vwap': 326272115.134320,
                'date': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.dayCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple day records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of day record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await day.prisma().create_many(
            data=[
                {
                    # data to create a day record
                    'symbol': 'ghfhiafcb',
                    'open': 744964398.196968,
                    'high': 1116175964.86147,
                    'low': 1303003706.168663,
                    'close': 2000430152.186814,
                    'volume': 1860847622.144852,
                    'vwap': 1628650740.124960,
                    'date': datetime.datetime.utcnow(),
                },
                {
                    # data to create a day record
                    'symbol': 'idfjadbcc',
                    'open': 763719779.42999,
                    'high': 1775811865.89314,
                    'low': 995405759.210273,
                    'close': 271520213.45663,
                    'volume': 2058258651.158368,
                    'vwap': 878442065.167528,
                    'date': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.dayWhereUniqueInput,
        include: Optional[types.dayInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single day record.

        Parameters
        ----------
        where
            day filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned day model

        Returns
        -------
        prisma.models.day
            The deleted day record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        day = await day.prisma().delete(
            where={
                'id': 1627576247,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.dayWhereUniqueInput,
        include: Optional[types.dayInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique day record.

        Parameters
        ----------
        where
            day filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned day model

        Returns
        -------
        prisma.models.day
            The found day record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        day = await day.prisma().find_unique(
            where={
                'id': 2054802212,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.dayWhereUniqueInput,
        include: Optional[types.dayInclude] = None
    ) -> _PrismaModelT:
        """Find a unique day record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            day filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned day model

        Returns
        -------
        prisma.models.day
            The found day record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        day = await day.prisma().find_unique_or_raise(
            where={
                'id': 60335757,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.dayWhereInput] = None,
        cursor: Optional[types.dayWhereUniqueInput] = None,
        include: Optional[types.dayInclude] = None,
        order: Optional[Union[types.dayOrderByInput, List[types.dayOrderByInput]]] = None,
        distinct: Optional[List[types.dayScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple day records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of day records returned
        skip
            Ignore the first N results
        where
            day filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned day model
        order
            Order the returned day records by any field
        distinct
            Filter day records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.day]
            The list of all day records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 day records
        days = await day.prisma().find_many(take=10)

        # find the first 5 day records ordered by the open field
        days = await day.prisma().find_many(
            take=5,
            order={
                'open': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.dayWhereInput] = None,
        cursor: Optional[types.dayWhereUniqueInput] = None,
        include: Optional[types.dayInclude] = None,
        order: Optional[Union[types.dayOrderByInput, List[types.dayOrderByInput]]] = None,
        distinct: Optional[List[types.dayScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single day record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            day filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned day model
        order
            Order the returned day records by any field
        distinct
            Filter day records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.day
            The first day record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second day record ordered by the high field
        day = await day.prisma().find_first(
            skip=1,
            order={
                'high': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.dayWhereInput] = None,
        cursor: Optional[types.dayWhereUniqueInput] = None,
        include: Optional[types.dayInclude] = None,
        order: Optional[Union[types.dayOrderByInput, List[types.dayOrderByInput]]] = None,
        distinct: Optional[List[types.dayScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single day record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            day filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned day model
        order
            Order the returned day records by any field
        distinct
            Filter day records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.day
            The first day record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second day record ordered by the low field
        day = await day.prisma().find_first_or_raise(
            skip=1,
            order={
                'low': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.dayUpdateInput,
        where: types.dayWhereUniqueInput,
        include: Optional[types.dayInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single day record.

        Parameters
        ----------
        data
            day record data specifying what to update
        where
            day filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned day model

        Returns
        -------
        prisma.models.day
            The updated day record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        day = await day.prisma().update(
            where={
                'id': 684462146,
            },
            data={
                # data to update the day record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.dayWhereUniqueInput,
        data: types.dayUpsertInput,
        include: Optional[types.dayInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            day filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned day model

        Returns
        -------
        prisma.models.day
            The created or updated day record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        day = await day.prisma().upsert(
            where={
                'id': 1625503827,
            },
            data={
                'create': {
                    'id': 1625503827,
                    'symbol': 'idfjadbcc',
                    'open': 763719779.42999,
                    'high': 1775811865.89314,
                    'low': 995405759.210273,
                    'close': 271520213.45663,
                    'volume': 2058258651.158368,
                    'vwap': 878442065.167528,
                    'date': datetime.datetime.utcnow(),
                },
                'update': {
                    'symbol': 'idfjadbcc',
                    'open': 763719779.42999,
                    'high': 1775811865.89314,
                    'low': 995405759.210273,
                    'close': 271520213.45663,
                    'volume': 2058258651.158368,
                    'vwap': 878442065.167528,
                    'date': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.dayUpdateManyMutationInput,
        where: types.dayWhereInput,
    ) -> int:
        """Update multiple day records

        Parameters
        ----------
        data
            day data to update the selected day records to
        where
            Filter to select the day records to update

        Returns
        -------
        int
            The total number of day records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all day records
        total = await day.prisma().update_many(
            data={
                'close': 521827728.126603
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.dayWhereInput] = None,
        cursor: Optional[types.dayWhereUniqueInput] = None,
    ) -> int:
        """Count the number of day records present in the database

        Parameters
        ----------
        select
            Select the day fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            day filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.dayCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await day.prisma().count()

        # results: prisma.types.dayCountAggregateOutput
        results = await day.prisma().count(
            select={
                '_all': True,
                'volume': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.dayCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.dayWhereInput] = None,
        cursor: Optional[types.dayWhereUniqueInput] = None,
    ) -> types.dayCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.dayCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.dayWhereInput] = None,
        cursor: Optional[types.dayWhereUniqueInput] = None,
    ) -> Union[int, types.dayCountAggregateOutput]:
        """Count the number of day records present in the database

        Parameters
        ----------
        select
            Select the day fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            day filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.dayCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await day.prisma().count()

        # results: prisma.types.dayCountAggregateOutput
        results = await day.prisma().count(
            select={
                '_all': True,
                'vwap': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.dayCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.dayWhereInput] = None
    ) -> int:
        """Delete multiple day records.

        Parameters
        ----------
        where
            Optional day filter to find the records to be deleted

        Returns
        -------
        int
            The total number of day records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all day records
        total = await day.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.dayScalarFieldKeys'],
        *,
        where: Optional['types.dayWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.dayAvgAggregateInput'] = None,
        sum: Optional['types.daySumAggregateInput'] = None,
        min: Optional['types.dayMinAggregateInput'] = None,
        max: Optional['types.dayMaxAggregateInput'] = None,
        having: Optional['types.dayScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.dayCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.dayScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.dayScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.dayGroupByOutput']:
        """Group day records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar day fields to group records by
        where
            day filter to select records
        take
            Limit the maximum number of day records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.dayGroupByOutput]
            A list of dictionaries representing the day record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group day records by date values
        # and count how many records are in each group
        results = await day.prisma().group_by(
            ['date'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class monthActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.month]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await month.prisma().query_raw(
            'SELECT * FROM month WHERE id = $1',
            93253262,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.month
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await month.prisma().query_first(
            'SELECT * FROM month WHERE symbol = $1',
            'cafdaehjid',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.monthCreateInput,
        include: Optional[types.monthInclude] = None
    ) -> _PrismaModelT:
        """Create a new month record.

        Parameters
        ----------
        data
            month record data
        include
            Specifies which relations should be loaded on the returned month model

        Returns
        -------
        prisma.models.month
            The created month record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a month record from just the required fields
        month = await month.prisma().create(
            data={
                # data to create a month record
                'symbol': 'gifdddbia',
                'open': 127474245.94892,
                'high': 1964990155.122889,
                'low': 255202753.122357,
                'close': 541269159.106484,
                'volume': 508382461.102426,
                'vwap': 872078403.187474,
                'date': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.monthCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple month records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of month record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await month.prisma().create_many(
            data=[
                {
                    # data to create a month record
                    'symbol': 'jbgijghgb',
                    'open': 769267518.82031,
                    'high': 92728044.34485,
                    'low': 1121741130.149589,
                    'close': 208521688.86081,
                    'volume': 1660932118.52576,
                    'vwap': 736209796.49390,
                    'date': datetime.datetime.utcnow(),
                },
                {
                    # data to create a month record
                    'symbol': 'gdjgigfgc',
                    'open': 654007347.190526,
                    'high': 78746985.139832,
                    'low': 856000655.145233,
                    'close': 1573199653.201390,
                    'volume': 500965035.180062,
                    'vwap': 2077067425.167211,
                    'date': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.monthWhereUniqueInput,
        include: Optional[types.monthInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single month record.

        Parameters
        ----------
        where
            month filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned month model

        Returns
        -------
        prisma.models.month
            The deleted month record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        month = await month.prisma().delete(
            where={
                'id': 926677639,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.monthWhereUniqueInput,
        include: Optional[types.monthInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique month record.

        Parameters
        ----------
        where
            month filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned month model

        Returns
        -------
        prisma.models.month
            The found month record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        month = await month.prisma().find_unique(
            where={
                'id': 1447624116,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.monthWhereUniqueInput,
        include: Optional[types.monthInclude] = None
    ) -> _PrismaModelT:
        """Find a unique month record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            month filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned month model

        Returns
        -------
        prisma.models.month
            The found month record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        month = await month.prisma().find_unique_or_raise(
            where={
                'id': 1738083805,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.monthWhereInput] = None,
        cursor: Optional[types.monthWhereUniqueInput] = None,
        include: Optional[types.monthInclude] = None,
        order: Optional[Union[types.monthOrderByInput, List[types.monthOrderByInput]]] = None,
        distinct: Optional[List[types.monthScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple month records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of month records returned
        skip
            Ignore the first N results
        where
            month filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned month model
        order
            Order the returned month records by any field
        distinct
            Filter month records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.month]
            The list of all month records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 month records
        months = await month.prisma().find_many(take=10)

        # find the first 5 month records ordered by the open field
        months = await month.prisma().find_many(
            take=5,
            order={
                'open': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.monthWhereInput] = None,
        cursor: Optional[types.monthWhereUniqueInput] = None,
        include: Optional[types.monthInclude] = None,
        order: Optional[Union[types.monthOrderByInput, List[types.monthOrderByInput]]] = None,
        distinct: Optional[List[types.monthScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single month record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            month filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned month model
        order
            Order the returned month records by any field
        distinct
            Filter month records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.month
            The first month record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second month record ordered by the high field
        month = await month.prisma().find_first(
            skip=1,
            order={
                'high': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.monthWhereInput] = None,
        cursor: Optional[types.monthWhereUniqueInput] = None,
        include: Optional[types.monthInclude] = None,
        order: Optional[Union[types.monthOrderByInput, List[types.monthOrderByInput]]] = None,
        distinct: Optional[List[types.monthScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single month record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            month filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned month model
        order
            Order the returned month records by any field
        distinct
            Filter month records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.month
            The first month record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second month record ordered by the low field
        month = await month.prisma().find_first_or_raise(
            skip=1,
            order={
                'low': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.monthUpdateInput,
        where: types.monthWhereUniqueInput,
        include: Optional[types.monthInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single month record.

        Parameters
        ----------
        data
            month record data specifying what to update
        where
            month filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned month model

        Returns
        -------
        prisma.models.month
            The updated month record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        month = await month.prisma().update(
            where={
                'id': 340946258,
            },
            data={
                # data to update the month record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.monthWhereUniqueInput,
        data: types.monthUpsertInput,
        include: Optional[types.monthInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            month filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned month model

        Returns
        -------
        prisma.models.month
            The created or updated month record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        month = await month.prisma().upsert(
            where={
                'id': 601077795,
            },
            data={
                'create': {
                    'id': 601077795,
                    'symbol': 'gdjgigfgc',
                    'open': 654007347.190526,
                    'high': 78746985.139832,
                    'low': 856000655.145233,
                    'close': 1573199653.201390,
                    'volume': 500965035.180062,
                    'vwap': 2077067425.167211,
                    'date': datetime.datetime.utcnow(),
                },
                'update': {
                    'symbol': 'gdjgigfgc',
                    'open': 654007347.190526,
                    'high': 78746985.139832,
                    'low': 856000655.145233,
                    'close': 1573199653.201390,
                    'volume': 500965035.180062,
                    'vwap': 2077067425.167211,
                    'date': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.monthUpdateManyMutationInput,
        where: types.monthWhereInput,
    ) -> int:
        """Update multiple month records

        Parameters
        ----------
        data
            month data to update the selected month records to
        where
            Filter to select the month records to update

        Returns
        -------
        int
            The total number of month records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all month records
        total = await month.prisma().update_many(
            data={
                'close': 290603296.185582
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.monthWhereInput] = None,
        cursor: Optional[types.monthWhereUniqueInput] = None,
    ) -> int:
        """Count the number of month records present in the database

        Parameters
        ----------
        select
            Select the month fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            month filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.monthCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await month.prisma().count()

        # results: prisma.types.monthCountAggregateOutput
        results = await month.prisma().count(
            select={
                '_all': True,
                'volume': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.monthCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.monthWhereInput] = None,
        cursor: Optional[types.monthWhereUniqueInput] = None,
    ) -> types.monthCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.monthCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.monthWhereInput] = None,
        cursor: Optional[types.monthWhereUniqueInput] = None,
    ) -> Union[int, types.monthCountAggregateOutput]:
        """Count the number of month records present in the database

        Parameters
        ----------
        select
            Select the month fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            month filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.monthCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await month.prisma().count()

        # results: prisma.types.monthCountAggregateOutput
        results = await month.prisma().count(
            select={
                '_all': True,
                'vwap': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.monthCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.monthWhereInput] = None
    ) -> int:
        """Delete multiple month records.

        Parameters
        ----------
        where
            Optional month filter to find the records to be deleted

        Returns
        -------
        int
            The total number of month records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all month records
        total = await month.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.monthScalarFieldKeys'],
        *,
        where: Optional['types.monthWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.monthAvgAggregateInput'] = None,
        sum: Optional['types.monthSumAggregateInput'] = None,
        min: Optional['types.monthMinAggregateInput'] = None,
        max: Optional['types.monthMaxAggregateInput'] = None,
        having: Optional['types.monthScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.monthCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.monthScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.monthScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.monthGroupByOutput']:
        """Group month records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar month fields to group records by
        where
            month filter to select records
        take
            Limit the maximum number of month records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.monthGroupByOutput]
            A list of dictionaries representing the month record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group month records by date values
        # and count how many records are in each group
        results = await month.prisma().group_by(
            ['date'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models